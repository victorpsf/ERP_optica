DROP DATABASE IF EXISTS `ERP_OPTICA`;
CREATE DATABASE IF NOT EXISTS `ERP_OPTICA`;
USE `ERP_OPTICA`;

# TABLES

CREATE TABLE IF NOT EXISTS DATABASE_PARAMETERS (
	PARAMETERID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    PARAMETERNAME VARCHAR(500) NOT NULL UNIQUE,
    PARAMETERVALUE TEXT NOT NULL,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS `ENTERPRISE` (
	`ENTERPRISEID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `NAME` VARCHAR (200) NOT NULL UNIQUE,
    `DELETED_AT` DATETIME
);

CREATE TABLE IF NOT EXISTS `PERSON` (
	`PERSONID` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `NAME` VARCHAR(500) NOT NULL,
    `PERSONTYPE` INT(3) NOT NULL,
    `CALLNAME` VARCHAR(500),
    `CREATEDATE` DATETIME,
    `DELETED_AT` DATETIME,
  	`ENTERPRISEID` INT NOT NULL,
    
    FOREIGN KEY (`ENTERPRISEID`) REFERENCES `ENTERPRISE`(`ENTERPRISEID`)
);

CREATE TABLE IF NOT EXISTS `CREDENTIAL` (
	`CREDENTIALID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `PERSONID` BIGINT NOT NULL,
    `DELETED_AT` DATETIME,
    
    FOREIGN KEY (`PERSONID`) REFERENCES `PERSON` (`PERSONID`)
);

CREATE TABLE IF NOT EXISTS `AUTH` (
	`AUTHID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `NAME` TEXT NOT NULL, # SHA512
    `PASSPHRASE` TEXT NOT NULL, # DERIVATION KEY PBKDF2
    `CREDENTIALID` INT NOT NULL,
	`DELETED_AT` DATETIME,

    FOREIGN KEY (`CREDENTIALID`) REFERENCES `CREDENTIAL` (`CREDENTIALID`)
);

CREATE TABLE IF NOT EXISTS `PAPER` (
	`PAPERID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `NAME` VARCHAR(500) NOT NULL,
    `ACTIVATED` TINYINT DEFAULT 0, 
    `DELETED_AT` DATETIME
);

CREATE TABLE `CONTROL` (
  `DMLTYPEID` INT NOT NULL,
  `ENTITYTYPEID` INT NOT NULL,
  `ENTITYID` INT NOT NULL,
  `USERID` INT NOT NULL,
  `CONTROLDATE` DATETIME DEFAULT CURRENT_TIMESTAMP,
  `ENTERPRISEID` INT NOT NULL,

  FOREIGN KEY (`USERID`) REFERENCES `AUTH`(`AUTHID`),
  FOREIGN KEY (`ENTERPRISEID`) REFERENCES `ENTERPRISE`(`ENTERPRISEID`)
);

CREATE TABLE IF NOT EXISTS `CODE` (
	`CODEID` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `AUTHID` INT NOT NULL,
    `CODE` VARCHAR(6),
    `CODETYPE` INT NOT NULL,
    `EXPIRE_IN` DATETIME
);

CREATE TABLE IF NOT EXISTS `ENTERPRISEXPERSON` (
	`ENTERPRISEID` INT NOT NULL,
    `PERSONID` BIGINT NOT NULL,
    
    FOREIGN KEY (`ENTERPRISEID`) REFERENCES `ENTERPRISE`(`ENTERPRISEID`),
    FOREIGN KEY (`PERSONID`) REFERENCES `PERSON`(`PERSONID`)
);

CREATE TABLE IF NOT EXISTS `AUTHXENTERPRISE` (
	`AUTHID` INT NOT NULL,
    `ENTERPRISEID` INT NOT NULL,
    `DELETED_AT` DATETIME,
    
    FOREIGN KEY (`AUTHID`) REFERENCES `AUTH`(`AUTHID`),
    FOREIGN KEY (`ENTERPRISEID`) REFERENCES `ENTERPRISE`(`ENTERPRISEID`)    
);

CREATE TABLE IF NOT EXISTS `PERMISSION` (
	`PERMISSIONID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `PERMISSIONNAME` VARCHAR(500) NOT NULL UNIQUE,
    `DELETED_AT` DATETIME
);

CREATE TABLE IF NOT EXISTS `AUTHXPAPER` (
	`AUTHID` INT NOT NULL,
    `PAPERID` INT NOT NULL,
    `DELETED_AT` DATETIME,
    
    FOREIGN KEY (`AUTHID`) REFERENCES `AUTH`(`AUTHID`),
    FOREIGN KEY (`PAPERID`) REFERENCES `PAPER`(`PAPERID`)    
);

CREATE TABLE IF NOT EXISTS `PAPERXPERMISSION` (
    `PAPERID` INT NOT NULL,
	`PERMISSIONID` INT NOT NULL,
    
    FOREIGN KEY (`PERMISSIONID`) REFERENCES `PERMISSION`(`PERMISSIONID`),
    FOREIGN KEY (`PAPERID`) REFERENCES `PAPER`(`PAPERID`)    
);

CREATE TABLE IF NOT EXISTS `PERSONDOCUMENT` (
	`DOCUMENTID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `DOCUMENTTYPE` INT NOT NULL,
    `PERSONID` BIGINT NOT NULL,
    `VALUE` TEXT NOT NULL,
    
    FOREIGN KEY (`PERSONID`) REFERENCES `PERSON`(`PERSONID`)
);

CREATE TABLE IF NOT EXISTS `PERSONCONTACT` (
	`CONTACTID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `CONTACTTYPE` INT NOT NULL,
    `PERSONID` BIGINT NOT NULL,
    `VALUE` TEXT NOT NULL,

    FOREIGN KEY (`PERSONID`) REFERENCES `PERSON`(`PERSONID`)
);

CREATE TABLE IF NOT EXISTS `PERSONADDRESS` (
	`ADDRESSID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `ADDRESSTYPE` INT NOT NULL,
    `PERSONID` BIGINT NOT NULL,
    `VALUE` TEXT NOT NULL,

    FOREIGN KEY (`PERSONID`) REFERENCES `PERSON`(`PERSONID`)
);

# END TABLES;

# PROCEDURES

DELIMITER $$

CREATE PROCEDURE GET_INTERVAL_SECCONDS_TO_CODE (OUT SECCONDS INT) 

BEGIN
	DECLARE _SECCONDS INT;
	SELECT CAST(DBP.PARAMETERVALUE AS UNSIGNED INT) INTO _SECCONDS
    FROM DATABASE_PARAMETERS DBP 
    WHERE DBP.PARAMETERNAME = 'CODE_TABLE_INTERVAL_EXPIRE' LIMIT 1;
    
	SET SECCONDS = _SECCONDS;
END;

CREATE PROCEDURE GET_CODE_AND_EXPIRETIME_TO_TABLE_CODE (OUT CODE INT, OUT EXPIRE_IN DATETIME)

BEGIN
    DECLARE _CODE INT DEFAULT 0;
    DECLARE _EXPIRE_IN DATETIME;
    DECLARE SECCONDS INT;
    
    CALL GET_INTERVAL_SECCONDS_TO_CODE(@SECCONDS);
    SELECT @SECCONDS INTO SECCONDS;

    WHILE _CODE < 100000 OR _CODE > 999999 DO
        SELECT 
            FLOOR(
                RAND() * 1000000
            ),
            DATE_ADD(
                CURRENT_TIMESTAMP,
                INTERVAL SECCONDS SECOND
            )

            INTO _CODE, _EXPIRE_IN;
    END WHILE;

    SET CODE = _CODE;
    SET EXPIRE_IN = _EXPIRE_IN;
END;

CREATE PROCEDURE CHANGE_EXPIRE_CODES ()

BEGIN 
    DECLARE DONE INT DEFAULT FALSE;
    DECLARE CODEIDS CURSOR 
        FOR SELECT C.CODEID
            FROM CODE AS C
            WHERE C.EXPIRE_IN <= CURRENT_TIMESTAMP;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;

    OPEN CODEIDS;

    REMOVE_LOOP: LOOP
        IF DONE THEN LEAVE REMOVE_LOOP; END IF;

        BEGIN
            DECLARE CODEID BIGINT;
            FETCH CODEIDS INTO CODEID;

            CALL GET_CODE_AND_EXPIRETIME_TO_TABLE_CODE(@CODE, @EXPIREIN);
            UPDATE CODE C
                SET C.CODE = (SELECT @CODE),
                    C.EXPIRE_IN = (SELECT @EXPIREIN)
            WHERE C.CODEID = CODEID;
        END;
    END LOOP;

    CLOSE CODEIDS;
END;

$$ DELIMITER ;

# END PROCEDURES

# TRIGGER 

DELIMITER //

CREATE TRIGGER SET_CODE_AND_EXPIRETIME BEFORE INSERT ON CODE FOR EACH ROW

BEGIN 
	CALL GET_CODE_AND_EXPIRETIME_TO_TABLE_CODE(@CODE, @EXPIREIN);
    
    SET NEW.CODE = (SELECT @CODE);
    SET NEW.EXPIRE_IN = (SELECT @EXPIREIN);
END;

// DELIMITER ;

# END TRIGGER

CREATE EVENT CHANGE_EXPIRECODES ON SCHEDULE EVERY 4 MINUTE DO CALL CHANGE_EXPIRE_CODES();

# SEED

INSERT INTO `DATABASE_PARAMETERS` (`PARAMETERNAME`, `PARAMETERVALUE`) VALUES ('CODE_TABLE_INTERVAL_EXPIRE', '120');
INSERT INTO `ENTERPRISE` (`NAME`) VALUES ('ADMIN');
INSERT INTO `PERSON` (`NAME`, `CALLNAME`, `PERSONTYPE`,`CREATEDATE`, `ENTERPRISEID`) VALUES ('AMVX', 'AMVX ENTERPRISE DEVELOPMENT SOFTWARE', 2, DATE('2022-12-15'), 1);
INSERT INTO `PERSON` (`NAME`, `PERSONTYPE`,`CREATEDATE`, `ENTERPRISEID`) VALUES ('JOÃƒO VICTOR PALMEIRA DA SILVA FERREIRA', 1, DATE('1997-06-10'), 1);
INSERT INTO `ENTERPRISEXPERSON` (`ENTERPRISEID`, `PERSONID`) VALUES (1, 1);
INSERT INTO `PERSONCONTACT` (`CONTACTTYPE`, `PERSONID`, `VALUE`) VALUES (2, 2, 'victorpsf2@hotmail.com');
INSERT INTO `CREDENTIAL` (`PERSONID`) VALUES (2);
INSERT INTO `PERMISSION` (`PERMISSIONNAME`) VALUES ('ACCESSACCOUNTPERMISSION'), ('CREATEACCOUNTPERMISSION'), ('UPDATEACCOUNTPERMISSION'), ('REMOVEACCOUNTPERMISSION'), ('ACCESSPERSONJURIDICAL'), ('CREATEPERSONJURIDICAL'), ('UPDATEPERSONJURIDICAL'), ('REMOVEPERSONJURIDICAL'), ('ACCESSPERSONPHYSICAL'), ('CREATEPERSONPHYSICAL'), ('UPDATEPERSONPHYSICAL'), ('REMOVEPERSONPHYSICAL'), ('ACCESSCLIENT'), ('CREATECLIENT'), ('UPDATECLIENT'), ('REMOVECLIENT'), ('ACCESSEMPLOYEE'), ('CREATEEMPLOYEE'), ('UPDATEEMPLOYEE'), ('REMOVEEMPLOYEE'), ('ACCESSENTERPRISE'), ('CREATEENTERPRISE'), ('UPDATEENTERPRISE'), ('REMOVEENTERPRISE'), ('ACCESSDOCUMENT'), ('CREATEDOCUMENT'), ('UPDATEDOCUMENT'), ('REMOVEDOCUMENT'), ('ACCESSCONTACT'), ('CREATECONTACT'), ('UPDATECONTACT'), ('REMOVECONTACT'), ('ACCESSADDRESS'), ('CREATEADDRESS'), ('UPDATEADDRESS'), ('REMOVEADDRESS');
INSERT INTO `AUTH` (`NAME`, `PASSPHRASE`, `CREDENTIALID`) VALUES ('kzzDxfrtyORs2u4aoIPPsFHaXPPdipc//o6uGSLZj8MNgqa0ORz9nR3VbxPedsKi+NJtnh21Z0o5aSYqjzCByQ==', '', 1);
INSERT INTO `PAPER` (`NAME`) VALUES ('ADMIN');
INSERT INTO `AUTHXENTERPRISE` (`AUTHID`, `ENTERPRISEID`) VALUES (1, 1);
INSERT INTO `PAPERXPERMISSION` (`PAPERID`, `PERMISSIONID`) VALUES (1, 1),(1, 2),(1, 3),(1, 4),(1, 5),(1, 6),(1, 7),(1, 8),(1, 9),(1, 10),(1, 11),(1, 12),(1, 13),(1, 14),(1, 15),(1, 16),(1, 17),(1, 18),(1, 19),(1, 20),(1, 21),(1, 22),(1, 23),(1, 24),(1, 25),(1, 26),(1, 27),(1, 28),(1, 29),(1, 30),(1, 31),(1, 32),(1, 33),(1, 34),(1, 35),(1, 36);
INSERT INTO `AUTHXPAPER` (`AUTHID`, `PAPERID`) VALUES (1, 1);

# END SEED;

SELECT * FROM CODE;